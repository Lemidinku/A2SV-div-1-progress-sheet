class Solution:
    def containsCycle(self, grid: List[List[str]]) -> bool:
        n = len(grid)
        m = len(grid[0])
        dir = [(0,1), (0,-1), (-1,0), (1,0)]
        self.cycle = False
        color = defaultdict(int)

        def dfs(curr,prev):
            row,col =curr
            color[(row,col)]=1
            for x,y in dir:
                if (0<=row+x<n and 0<=col+y<m) and grid[row+x][col+y]==grid[row][col] and (row+x,col+y) != prev:
                    if color[(row+x,col+y)] == 1:
                        return True
                    if color[(row+x,col+y)]== 0 and dfs((row+x,col+y),(row,col)):
                        return True
            color[(row,col)]=2
            return False

        for i in range(n):
            for j in range(m):
                if color[(i,j)]==0 and dfs((i,j),(-1,-1)):
                    return True
        return False
